1.	Server class
	The class was defined in file called server.h and implemented in server.h
	This class is a abstract class.It be inherted by httpclass.
	
	------------------- member fucntion ------------------------------
	* public :

	Server();
		default constructor.
	virtual ~Server();
		virtual deconstructor.
	virtual bool Init(int sockfd = -1, struct sockaddr_in *addr_ptr = NULL);
		Iinitial function.To initialize member variable.
		input: sockfd  : server socket description
			   addr_ptr: server address struct pointer.
		return: if success, return true.
	virtual void Start() = 0;
		start to service client's request.
	virtual void SetSocketfd(int sockfd) = 0;
		set socket file description.
		input : sockfd is used to set socket file description.
	vitual struct sockaddr_in *GetSockAddress() = 0;
		get socket address pointer.
		return: socket address pointer.
	virtual bool Register(std::string name,
						  std::string password);
		registering at server.
		input: name: account's name
			   password: account's password
		return: if success, return true.
	virtual bool Enroll(std::string name,
						std::string password);
		Enroll account in server.
		input: name: account's name
			   password: account's password
		return: if success, return true.
	virtual void SetRegister(RegisterAction *ract_ptr) = 0;
		Set rigister's action.
		input: ract_ptr: register's action performer.

	virtual void SetEnroll(EnrollAction *eact_ptr) = 0;
		Set enroll's action.
		input: ract_ptr: enroll's action performer.

	virtual RegisterAction *GetRegister() const = 0;
		Get rigister's action.
		return: register's action performer.

	virtual EnrollAction *GetEnroll() const = 0;
		Get enroll's action.
		input: ract_ptr: enroll's action performer.

	* private :
		Server(const Server &);
		void operate = (const Server &);

	----------------- member variable ----------------------------------
	* protected :

		int _sockfd;						//  server socket description
		struct sockaddr_in *_addr_ptr		//  server address struct pointer
		RegisterAction *_registeraction_ptr;//  register's action pointer.
		EnrollAction *_enrollaction_ptr;	//  enroll's action pointer.



2.	HttpServer class
	The class was defined in server.h and implemented in httpserver.cc.
	This class inhert from Server class.It is used to service http type requestion.
	
	------------------------ member function ---------------------------------------
	* public :
	
	HttpServer();
		default constructor.

	virtual ~HttpServer();
		virtual deconstructor.

	virtual bool Init(int sockfd = -1, struct sockaddr_in *addr_ptr = NULL);
		Iinitial function.To initialize member variable.
		input: sockfd  : server socket description
			   addr_ptr: server address struct pointer.
		return: if success, return true.

	virtual void Start();
		start to service client's request.
	virtual void SetSocketfd(int sockfd);
		set socket file description.
		input : sockfd is used to set socket file description.
	
	vitual struct sockaddr_in *GetSockAddress();
		get socket address pointer.
		return: socket address pointer.
	
	virtual bool Register(std::string name,
						  std::string password);
		registering at server.
		input: name: account's name
			   password: account's password
		return: if success, return true.

	virtual bool Enroll(std::string name,
						std::string password);
		Enroll account in server.
		input: name: account's name
			   password: account's password
		return: if success, return true.

	void SetReuseAddr(bool flag);
		set socket level option SO_REUSEADDR is opened, or not.
		input: flag: if flag is true, opened the option. Otherwise, close the option.
	
	bool IsReuseAddr();
		check socket level option SO_REUSEADDR is opened, or not.
		return: if socket level option SO_REUSEADDR is opened, return true.

	void Get(const std::string url);
		resopnd http's Get requestion.
		inupt: url: relative to the root directory of the server

	void Post(const std::string url);
		respond http's Post requestion.
		inupt: url: relative to the root directory of the server

	bool Handle(string request);
		handle client/browser 's request.
		input: request: client/browser's request context.
		return: if success, return true.

	bool Handle(char *request);
		handle client/browser 's request.
		input: request: client/browser's request context.
		return: if success, return true.

	string GetURL(const string request);
		acquire URL from http request.
		input: request: http request
		return: if success, return URL, otherwise, return null string.

	bool GetURL(const string request, string &url);
		acquire URL from http request.
		input: request: http request
		output:	url: return url, if fail, return null string.
		return: if success, return true.

	virtual void SetRegister(RegisterAction *ract_ptr) = 0;
		Set rigister's action.
		input: ract_ptr: register's action performer.

	virtual void SetEnroll(EnrollAction *eact_ptr) = 0;
		Set enroll's action.
		input: ract_ptr: enroll's action performer.

	virtual RegisterAction *GetRegister() const = 0;
		Get rigister's action.
		return: register's action performer.

	virtual EnrollAction *GetEnroll() const = 0;
		Get enroll's action.
		input: ract_ptr: enroll's action performer.

	int Socket();
		create a socket.
		return: if success, return socket.

	int Accept(sockaddr *addr_ptr, socklen_t *len_ptr);
		Accept a client's request.
		input: addr_ptr: point to socket address structrue.
			   len_ptr : point to socket address structrue's len
		return: socket description.

	bool Bind();
		make address relate to socket.
		return: if success, return true.
	bool Listen(const int qlen);
		monitor socket.Monitoring queue's length is equal to qlen.
		input: qlen: a queue's len, means unfinished connection number.
		return: if success, return true.

	* private :
		HttpServer(HttpServer &);
		void operator = (const HttpServer &);

	------------------------- member variable ----------------------------------------
	* protected :
	
	======================== inhert from Server class ================================
		int _sockfd;						//  server socket description
		struct sockaddr_in *_addr_ptr;		//  server address struct pointer.
		RegisterAction *_registeraction_ptr;//  register's action pointer.
		EnrollAction *_enrollaction_ptr;	//  enroll's action pointer.

	======================== HttpServer class ========================================
		socklen_t _isreuseaddr;			//  socket level option SO_REUSEADDR
		SimpleMySql *_spmysql_ptr;		//  database pointer.


//  ------------------------- unuse ---------------------------------------------------
//3.	Database class 
//	The class is defined in database.h and is implement in database.cc.
//	This is all database class's parent class. 
//
//	-------------------------- member function ----------------------------------------
//	* public :
//
//	virtual ~Database()
//		virtual deconstructor.
//	static Database *GetInstance();
//		A static function to get unique Database instance.
//		return: if success, return Database pointer, otherwise, return NULL.
//	virtual bool Query();
//		query database.
//		return: if success, return true.
//	virtual bool Insert();
//		Insert a data to database.
//		return: if success, return true.
//	
//	* private :
//
//	Database();
//		defualt constructor.
//	Database(const Database &);
//	void operator = (const Database &);
//	bool Init();
//		initialize database.
//		if success, return true.
//	------------------------- member variable -----------------------------------------
//
//	* protect :
//		std::string _name;			//  login name
//		std::string _password;		//  login password
//		std::string _db;			//  database used soon
//	
//	* private :
//
//	static Database *s_database_ptr;	//  unique database instance's pointer


3.	SimpleMySql class
	The class is defined in simplemysql.h and is implemented in simplemysql.cc.
	This class inhert from Database class and package MYSQL's operation.

	--------------------------- member function ---------------------------------------
	* public :

	virtual ~SimpleMySql();
		virtual deconstructor.
	bool Init()
		initial function.
		return: if success, return true.

	static SimpleMySql *GetInstance();
		it is a static function to get unique SimpleMySql instance variable's pointer.
		return: if success, return unique SimpleMySql instance variable's pointer.
				Otherwise, return NULL.
	bool Query();
		query database.
		return: if success, return true.

	bool Insert();
		Insert a data to database.
		return: if success, return true.

	bool Search(const string table, const string field, const string value);
		Use mysql's query keyword to judge whether the field of table have a value.
		input: table: seleted table
			   filed: seleted filed
			   value: matched value.
	bool Search(const string table, const string condition);
		Use mysql's query keyword to judge whether condition is established.
		input: table: selete table.
			    condidtion: judged condition.

	string GetLoginName();
		get mysql login name.
		return: login name.

	string GetLoginPassword();
		get mysql login password.
		return: login password.

	string GetLoginDatabase();
		get mysql login database.
		return: login database.

	string GetServer();
		get mysql mysql server host name.
		return: mysql server host name.

	* private :

	SimpleMySql();
		default constructor.
	SimpleMySql(const SimpleMysql);
	void operator = (const SimpleMySql &);
	bool Init();
		initialize database.
		return: if success, return true.

	-------------------------- member variable -------------------------------------------	
	* private :
		static shared_ptr<SimpleMySql> _simplemysql_ptr;	
								//  SimpleMySql pointer is a shared_ptr.
								//  point to unique SimpleMyql instance.
								//  because a program should only operate a database.
		MYSQL *_mysql_ptr;		//  MYSQL pointer. point to a unique mysql database.
		std::string _name;		//  login name
		std::string _password;	//  login password
		std::string _db;		//  database used soon
		std::string _server		//  the server host name.
								//  allow that the value is localhost
		

4. RegisterAction class
	The class is defined in registeraction and implemented in registeraction.cc.
	The clss packged register's action. Use this class to perform register.

	--------------------------- member function -------------------------------
	* public :
	
	RegisterAction();
		default constructor.

	virtual ~RegisterAction();
		virtual deconstructor.

	virtual bool Init(boost::shared_ptr<SimpleMySql>spmysql_ptr);
		Initialize the instance. 
		Use spmysql_ptr to intialize menber variable _spmysql_ptr.
		input: spmysql_ptr: unique SimpleMysql variable 's pointer.
		return: if success, return true.

	virtual bool Register(const std::string name,
						  const std::string password);
		Register in mysql.
		input: name: account name
			   password: account password
		return: if success, return true.
	
	* private :
		RegisterAction(const RegisterAction &);
		void operate = (const RegisterAction &);

	----------------------------- member variable -----------------------------
	* protected :
		shared_ptr<SimpleMysql> _spmysql_ptr;	//  point to mysql


5. HttpRegisterAction class:
	The class is defined in registeraction.h and implemented in httpregisteraction.cc.
	The class packged the httpserver's register action.
	Use the class to perform httpserver's register.

	----------------------------- member functon ------------------------------
	* public ：
	
	HttpRegisterAction();
		default constructor.

	virtual bool Init(boost::shared_ptr<SimpleMySql>spmysql_ptr);
		Initialize the instance. 
		Use spmysql_ptr to intialize menber variable _spmysql_ptr.
		input: spmysql_ptr: unique SimpleMysql variable 's pointer.
		return: if success, return true.
		
	virtual ~HttpRegisterAction();
		virtual deconstrutor.

	virtual bool Register(const std::string name,
						  const std::string password);
		Register in mysql.
		input: name: account name
			   password: account password
		return: if success, return true.

	----------------------------- member variable -----------------------------
	* protected :

	============================= inhert from EnrollAction ====================
		shared_ptr<SimpleMysql> _spmysql_ptr;	//  point to mysql


6. EnrollAction class:
	The class is defined in enrollacion.h and is implemented in enrollaction.
	The class packged enroll operator.
	Use the class to perform enroll operator.

	-------------------------- member function --------------------------------
	* public :

	EnrollAction();
		default constructor.

	virtual ~EnrollAction();
		virtual deconstructor.
		
	virtual bool Init(boost::shared_ptr<SimpleMySql> spmysql_ptr);
		Initialize the instance. 
		Use spmysql_ptr to intialize menber variable _spmysql_ptr.
		input: spmysql_ptr: unique SimpleMysql variable 's pointer.
		return: if success, return true.
		
	virtual bool Enroll(const std::string name,
						const std::string password);
		Enroll in mysql. if account existed, fail.
		input: name: account name
			   password: account password
		return: if success, return true.

	----------------------------- member variable -----------------------------
	* protected :

		shared_ptr<SimpleMysql> _spmysql_ptr;	//  point to mysql



7. HttpEnrollAction class :
	The class is defined in enrollaction.h and is implemented httpenrollacion.cc.
	The class packged httpserver's enroll operator.
	Use this class to enroll in httpserver.

	--------------------------- member function -------------------------------
	* public :

	HttpEnrollAction();                                                	
		default constructor.

	virtual ~HttpEnrollAction();
		virtual deconstructor.
		
	virtual bool Init(boost::shared_ptr<SimpleMySql> spmysql_ptr);
		Initialize the instance. 
		Use spmysql_ptr to intialize menber variable _spmysql_ptr.
		input: spmysql_ptr: unique SimpleMysql variable 's pointer.
		return: if success, return true.
		
	virtual bool Enroll(const std::string name,
						const std::string password);
		Enroll in mysql. if account existed, fail.
		input: name: account name
			   password: account password
		return: if success, return true.

	----------------------------- member variable -----------------------------
	* protected :

	============================= inhert from EnrollAction ====================
		shared_ptr<SimpleMysql> _spmysql_ptr;	//  point to mysql


8. MulThreads class
	The class is defined in multhreads.h and is implemented in multhreads.cc
	The class packged multiple threads's action.What's more, it offer a 
	interface which is used to create multiple threads( Threads_Create())

	--------------------------- member function -------------------------------
	* public :
	
	MulThreads();
		default constructor.
	virtual ~MulThreads();
		virtual deconstructor.
	virtual bool Init();
		initialize instance.
		return: if success, return true.
	virtual bool Create(const unsigned int nthreads) = 0;
		create nthreads threads, new threads executed will start the 
		private member function called start_rtn.function.
		What calls for special attention is that which threads will 
		execute at first is not sure, when threads are created.
	input: nthreads: the number of threads that were created.
	return: if create threads success, return true.
	virtual void Loop() = 0;
		if you want to make the main thread be executed incessantly, you can
		call this function.

	virtual void Closeall() = 0;
		if you do not make main thread be executed incessantly, you should call
		this function to close all sub threads.

	* protected :
	
	void *Start_rtn(void *arg) = 0;
		the function that threads start.
		input: arg: can point to any type argument.

	------------------------- member variables --------------------------------
	* public :

	static pthread_mutex_t s_client_mutex;	//  client's mutex
	unsigned int _nthreads;					//  number of threads
	pthread_t *_threads;					// thread array pointer.


9. HttpMulThreads class
	The class is defined in multhreads.h and is implemented in
	httpmulthreads.cc.Use the class to create threads to service for 
	httpserver.

	------------------------ member function ----------------------------------
	* public :
	
	virtual bool Init(HttpServer *httpserver);
		Initialize instance.
		input: httpserver: point to httpserver.not null.

	======================== inhert from MulThreads ===========================
	* public :

	HttpMulThreads();
		default constructor.

	HttpMulThreads(HttpServer *httpserver);
		input: httpserver: point to httpserver

	virtual ~HttpMulThreads();
		virtual deconstructor.
		But This deconstructor do not free httpserver pointer;
	
	viirtual bool Init();
		Initialize instance.
		return: if success, return true.

	virtual bool Init(HttpServer *httpserver);
		Initialize instance whth httpserver.
		input: httpserver: point to httpserver
		return: if success return true.

	virtual bool Create(const unsigned int nthreads);
		create nthreads threads, new threads executed will start the 
		private member function called Start_rtn function.
		What calls for special attention is that which threads will 
		execute at first is not sure, when threads are created.
		input: nthreads: the number of threads that were created.
		return: if create threads success, return true.

	virtual void Loop();
		if you want to make the main thread be executed incessantly, you can
		call this function.

	virtual void Closeall();
		if you do not make main thread be executed incessantly, you should call
		this function to close all sub threads.

	* private :

	void *Start_rtn(void *arg) = 0;
		the function that threads start.
		input: arg: can point to any type argument.
	
	----------------------- member variables ----------------------------------
	* private :

	HttpServer *_httpserver		//  point to httpserver, not null;
	

	====================== inhert from MulThreads =============================
	* public :

	static pthread_mutex_t s_client_mutex;	// client's mutex
	unsigned int _nthreads;					//  number of threads
	pthread_t *_threads;					// thread array pointer.
	

10. JsonTransverter class:
	The class is defined in file jsontransverter.h and is implemented in file
	jsontransverter.cc.
	The class is use to transverte between string and json string 
	by using jsoncpp library.

	--------------------- member function -----------------
	* public :

	JsonTransverter();
		default constructor.

	JsonTransverter(std::string str);
		use str to initialize member varialable _str;
		input: str: be use to member variable.

	~JsonTransverter();
		deconstructor.
	
	bool Init();
		initialize all member variable.if need to malloc memory,
		this function will do this.
		return: if success, return true.
	
	void ToJsonString(std::string &str) const;
		make member variable _str to transverte to json string.
		output: str: return string which was transverted.

	void ToJsonString(const std::string prestr, std::string str);
		make prestr to transverte to json string.
		input: prestr: the string which you transverte.
		output: str return string which was transverted.

	void SetString(std::string str);
		set member variable _str.
		input: str: be use to set _str's value.
	
	void GetString(std::string &str);
		get member variable _str's value. 
		output: str: save member variable _str's value.
	
	void Append(cons std::string &str);
		extends the member variable _str by appending addintional characters 
		at the end of its current value.
		the string is a json object or a json array.
		input: str: anthor string object, whose value is appended.

	-------------------- member variable --------------------------------------
	* public :

	std::string _str;	//  save a string which is use to transverte.


11. Session class :
	This class is defined in session.h and is implemented in session.cc.
	The class is used to check client's status. 

	------------------- member function ---------------------------------------
	* public :

	Session();
		default constructor.
	~Session();
		Deconstructor.
	void Insert();
		Insert a new Session.
	void Delete();
		Delete a Session.
	void Search();
		Search a Session.
